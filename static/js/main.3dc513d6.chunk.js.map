{"version":3,"sources":["trivia.png","components/Header.js","redux/actions/index.js","pages/Feedback.js","pages/Ranking.js","components/Questions.js","components/Timer.js","pages/Game.js","services/tokenAPI.js","pages/Login.js","pages/Settings.js","App.js","redux/reducers/login.js","redux/reducers/game.js","redux/reducers/player.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["module","exports","Header","this","props","playerName","playerScore","playerEmail","className","data-testid","src","md5","toString","alt","React","Component","defaultProps","connect","store","login","player","score","showTimer","payload","type","timeOver","actionReciveButton","Feedback","playAgainClick","history","resetScore","resetAssertions","showTimerAction","push","rankingButtonClick","totalPoints","getScore","onClick","assertions","dispatch","Ranking","goHomeButton","ranking","JSON","parse","localStorage","getItem","sort","a","b","map","position","index","key","picture","name","Question","alternate","element","correct","question","correct_answer","length","innerText","classList","add","validationAnswer","target","timer","sumScoreAction","sumPoints","id","difficulty","handleClick","reciveButton","timeOverAction","buttons","document","querySelectorAll","setTimeout","randomArray","timeOverStore","wrongAnswerIndex","category","answer","disabled","game","showButton","sumScore","Timer","Game","componentDidMount","fetchAPI","timeToAnswer","saveInLocalStorage","persson","setItem","stringify","ricoverRankingAtLocalStorage","resetClass","myInterval","setInterval","maxTimer","location","pathname","includes","clearInterval","onClickChange","indexQuestions","state","setState","prevState","questions","requestAPI","requestState","to","endPoint","fetch","resolve","json","data","obj","results","response_code","incorrect_answers","Math","random","requestQuestions","getToken","response","Login","handleInputChange","value","isButtonDisabled","test","sendPlayerInfoToStore","require","token","htmlFor","placeholder","onChange","playerInfoToStore","Settings","App","logo","path","exact","component","INITIAL_STATE","action","endGame","rootReducer","combineReducers","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3dc513d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","import md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nclass Header extends React.Component {\n  render() {\n    const { playerName, playerScore, playerEmail } = this.props;\n    return (\n      <header>\n        <img\n          className=\"icon-header\"\n          data-testid=\"header-profile-picture\"\n          src={ `https://www.gravatar.com/avatar/${md5(playerEmail).toString()}` }\n          alt=\"ProfileAVATAR\"\n        />\n        <p data-testid=\"header-player-name\">\n          Player:\n          {' '}\n          { playerName }\n        </p>\n        <p>\n          Score:\n          {' '}\n          <span data-testid=\"header-score\">\n            { `${playerScore}` }\n          </span>\n        </p>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  playerName: PropTypes.string.isRequired,\n  playerScore: PropTypes.number,\n  playerEmail: PropTypes.string.isRequired,\n};\n\nHeader.defaultProps = {\n  playerScore: 0,\n};\n\nconst mapStateToProps = (store) => ({\n  playerName: store.login.playerName,\n  // playerScore: store.game.player.score,\n  playerScore: store.player.score,\n  playerEmail: store.login.playerEmail,\n});\n\nexport default connect(mapStateToProps)(Header);\n","export const REQUEST_API = 'REQUEST_API';\nexport const REQUEST_SUCSSES = 'REQUEST_SUCSSES';\nexport const REQUEST_ERROR = 'REQUEST_ERROR';\nconst randomNumber = 0.5;\n\nconst receiveTokenSuccess = (token) => ({\n  type: 'RECEIVE_TOKEN_SUCCESS',\n  token,\n});\n\nconst requestAPI = () => ({\n  type: REQUEST_API,\n});\n\nconst requestSuccess = (obj) => ({\n  type: REQUEST_SUCSSES,\n  questions: obj.results,\n  requestState: obj.response_code,\n  randomArray: obj.results.map((question) => [\n    question.correct_answer,\n    ...question.incorrect_answers].sort(() => Math.random() - randomNumber)),\n});\n\nconst requestError = () => ({\n  type: REQUEST_ERROR,\n});\n\nexport const requestQuestions = (endPoint) => async (dispatch) => {\n  dispatch(requestAPI());\n  try {\n    const resolve = await fetch(endPoint);\n    const data = await resolve.json();\n    dispatch(requestSuccess(data));\n  } catch (error) {\n    dispatch(requestError());\n  }\n};\n\nconst playerInfoToStore = (playerName, playerEmail) => ({\n  type: 'PLAYER_INFO_TO_STORE',\n  playerName,\n  playerEmail,\n});\n\nconst showTimer = (payload) => ({ type: 'SHOW_TIMER', payload });\n\nconst timeOver = (payload) => ({ type: 'TIME_OVER', payload });\n\nconst actionReciveButton = (payload) => ({ type: 'SHOW_BUTTON', payload });\n\nconst sumScore = (payload) => ({ type: 'SUM_SCORE', payload });\n\nconst sumTotalPoints = () => ({ type: 'SUM_TOTAL_POINTS' });\n\nconst resetScoreAction = () => ({ type: 'RESET_SCORE' });\n\nconst resetAssertionsAction = () => ({ type: 'RESET_ASSERTIONS' });\n\nexport {\n  receiveTokenSuccess,\n  playerInfoToStore,\n  showTimer,\n  timeOver,\n  actionReciveButton,\n  sumScore,\n  sumTotalPoints,\n  resetScoreAction,\n  resetAssertionsAction,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport { resetAssertionsAction, resetScoreAction, showTimer } from '../redux/actions';\n\nclass Feedback extends React.Component {\n  playAgainClick = () => {\n    const { history, resetScore, resetAssertions, showTimerAction } = this.props;\n    const MAGICNUMBER = 30;\n    showTimerAction(MAGICNUMBER);\n    resetScore();\n    resetAssertions();\n    history.push('/');\n  }\n\n  rankingButtonClick = () => {\n    const { history, resetScore, resetAssertions, showTimerAction } = this.props;\n    const MAGICNUMBER = 30;\n    showTimerAction(MAGICNUMBER);\n    resetScore();\n    resetAssertions();\n    history.push('/ranking');\n  }\n\n  render() {\n    const { totalPoints, getScore } = this.props;\n    const MIN_POINTS = 3;\n    return (\n      <div>\n        <Header />\n        <p className=\"score\">\n          Score:\n          {' '}\n          <span data-testid=\"feedback-total-score\">\n            {getScore}\n          </span>\n        </p>\n        { totalPoints < MIN_POINTS\n          ? (\n            <p data-testid=\"feedback-text\">Could be better...</p>)\n          : <p data-testid=\"feedback-text\">Well Done!</p>}\n        <p>\n          Hits:\n          {' '}\n          <span data-testid=\"feedback-total-question\">\n            {totalPoints}\n          </span>\n        </p>\n        <button\n          type=\"button\"\n          onClick={ this.playAgainClick }\n          data-testid=\"btn-play-again\"\n        >\n          Play Again\n        </button>\n        <button\n          type=\"button\"\n          data-testid=\"btn-ranking\"\n          onClick={ this.rankingButtonClick }\n        >\n          Ranking\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (store) => ({\n  getScore: store.player.score,\n  totalPoints: store.player.assertions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetScore: (score) => dispatch(resetScoreAction(score)),\n  resetAssertions: (assertions) => dispatch(resetAssertionsAction(assertions)),\n  showTimerAction: (payload) => dispatch(showTimer(payload)),\n});\n\nFeedback.propTypes = {\n  totalPoints: PropTypes.number.isRequired,\n  getScore: PropTypes.number.isRequired,\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n  resetScore: PropTypes.func.isRequired,\n  resetAssertions: PropTypes.func.isRequired,\n  showTimerAction: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n","import md5 from 'crypto-js/md5';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Ranking extends React.Component {\n  goHomeButton = () => {\n    const { history } = this.props;\n    history.push('/');\n  }\n\n  render() {\n    const ranking = JSON.parse(localStorage.getItem('ranking'))\n      .sort((a, b) => b.score - a.score);\n    return (\n      <div>\n        <h1 data-testid=\"ranking-title\">Ranking</h1>\n        {\n          ranking.map((position, index) => (\n            <div key={ index }>\n              <img\n                src={ `https://www.gravatar.com/avatar/${md5(position.picture).toString()}` }\n                alt=\"GravatarImage\"\n              />\n              <p data-testid={ `player-name-${index}` }>{position.name}</p>\n              <p data-testid={ `player-score-${index}` }>{position.score}</p>\n            </div>\n          ))\n        }\n\n        <button\n          type=\"button\"\n          data-testid=\"btn-go-home\"\n          onClick={ this.goHomeButton }\n        >\n          Go Home!\n        </button>\n      </div>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default Ranking;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { actionReciveButton, sumScore, sumTotalPoints, timeOver } from '../redux/actions';\n\nclass Question extends React.Component {\n  componentDidUpdate() {\n    const { timer } = this.props;\n\n    if (timer === 0) {\n      const MAGICNUMBER = 1000;\n      const buttons = document.querySelectorAll('.button');\n      setTimeout(() => this.alternate(buttons), MAGICNUMBER);\n    }\n  }\n\n  alternate = (element) => {\n    const { question: { correct_answer: correct } } = this.props;\n    for (let index = 0; index < element.length; index += 1) {\n      if (element[index].innerText === correct) {\n        element[index].classList.add('question-correct');\n      } else {\n        element[index].classList.add('question-incorrect');\n      }\n    }\n  }\n\n  validationAnswer = (target) => {\n    const { question, timer, sumScoreAction, score, sumPoints } = this.props;\n    const MAGICNUMBER = 10;\n    const HARD = 3;\n    let subTotalScore = 0;\n    let totalScore = 0;\n    let assertions = 0;\n    if (target.id === 'correct-answer') {\n      if (question.difficulty === 'easy') {\n        assertions += 1;\n        subTotalScore = MAGICNUMBER + (timer * 1);\n        totalScore = subTotalScore + score;\n        sumScoreAction(totalScore);\n        sumPoints(assertions);\n      }\n      if (question.difficulty === 'medium') {\n        assertions += 1;\n        subTotalScore = MAGICNUMBER + (timer * 2);\n        totalScore = subTotalScore + score;\n        sumScoreAction(totalScore);\n        sumPoints(assertions);\n      }\n      if (question.difficulty === 'hard') {\n        assertions += 1;\n        subTotalScore = MAGICNUMBER + (timer * HARD);\n        totalScore = subTotalScore + score;\n        sumScoreAction(totalScore);\n        sumPoints(assertions);\n      }\n    }\n  }\n\n  handleClick = ({ target }) => {\n    const { reciveButton, timeOverAction } = this.props;\n    const buttons = document.querySelectorAll('.button');\n    this.alternate(buttons);\n    reciveButton(true);\n    this.validationAnswer(target);\n    timeOverAction(true);\n  }\n\n  render() {\n    const { question, randomArray, timeOverStore } = this.props;\n    let wrongAnswerIndex = 0;\n    return (\n      <>\n        <div data-testid=\"question-category\">\n          { question.category }\n        </div>\n        <br />\n        <div data-testid=\"question-text\">\n          { question.question }\n        </div>\n        <br />\n        <div data-testid=\"answer-options\">\n          {randomArray.map((answer) => {\n            if (answer === question.correct_answer) {\n              return (\n                <button\n                  data-testid=\"correct-answer\"\n                  id=\"correct-answer\"\n                  type=\"button\"\n                  key=\"correct_answer\"\n                  className=\"button\"\n                  onClick={ this.handleClick }\n                  disabled={ timeOverStore }\n                >\n                  {answer}\n                </button>);\n            }\n            wrongAnswerIndex += 1;\n            return (\n              <button\n                data-testid={ `wrong-answer-${wrongAnswerIndex - 1}` }\n                type=\"button\"\n                key={ wrongAnswerIndex }\n                className=\"button\"\n                onClick={ this.handleClick }\n                disabled={ timeOverStore }\n              >\n                {answer}\n              </button>);\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nQuestion.propTypes = {\n  question: PropTypes.objectOf(PropTypes.any).isRequired,\n  randomArray: PropTypes.arrayOf(PropTypes.any).isRequired,\n  timeOverStore: PropTypes.bool.isRequired,\n  score: PropTypes.number,\n  timer: PropTypes.number.isRequired,\n  sumScoreAction: PropTypes.func.isRequired,\n  reciveButton: PropTypes.func.isRequired,\n  sumPoints: PropTypes.func.isRequired,\n  timeOverAction: PropTypes.func.isRequired,\n};\n\nQuestion.defaultProps = {\n  score: 0,\n};\n\nconst mapStateToProps = (store) => ({\n  timeOverStore: store.game.timeOver,\n  showButton: store.game.showButton,\n  score: store.player.score,\n  timer: store.game.timer,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  reciveButton: (payload) => dispatch(actionReciveButton(payload)),\n  sumScoreAction: (payload) => dispatch(sumScore(payload)),\n  sumPoints: () => dispatch(sumTotalPoints()),\n  timeOverAction: (payload) => dispatch(timeOver(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Question);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nclass Timer extends React.Component {\n  render() {\n    const { timer } = this.props;\n    return (\n      <p data-testid=\"timer\" className=\"timer\">\n        Timer:\n        {' '}\n        { timer }\n      </p>\n    );\n  }\n}\n\nTimer.propTypes = {\n  timer: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (store) => ({\n  timer: store.game.timer,\n});\n\nexport default connect(mapStateToProps)(Timer);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Header from '../components/Header';\nimport Question from '../components/Questions';\nimport Timer from '../components/Timer';\nimport { actionReciveButton,\n  requestQuestions, showTimer, timeOver } from '../redux/actions';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = { indexQuestions: 0 };\n  }\n\n  componentDidMount = () => {\n    const { fetchAPI } = this.props;\n    fetchAPI(\n      `https://opentdb.com/api.php?amount=5&token=${localStorage.getItem(\n        'token',\n      )}`,\n    );\n\n    this.timeToAnswer();\n  };\n\n  saveInLocalStorage = () => {\n    const { player, login } = this.props;\n    const ranking = localStorage.getItem('ranking');\n    const persson = {\n      name: login.playerName,\n      score: player.score,\n      picture: login.playerEmail,\n    };\n\n    if (ranking === null) {\n      localStorage.setItem('ranking', JSON.stringify([persson]));\n    } else {\n      const ricoverRankingAtLocalStorage = JSON.parse([ranking]);\n      ricoverRankingAtLocalStorage.push(persson);\n      localStorage.setItem('ranking', JSON.stringify(ricoverRankingAtLocalStorage));\n    }\n  }\n\n  resetClass = () => {\n    const buttons = document.querySelectorAll('.button');\n\n    for (let index = 0; index < buttons.length; index += 1) {\n      buttons[index].className = 'button';\n    }\n  }\n\n  timeToAnswer = () => {\n    const { showTimerAction, timeOverAction, reciveButton, history } = this.props;\n\n    const TIMEINTERVAL = 1000;\n\n    const myInterval = setInterval(() => {\n      const { timer } = this.props;\n\n      let maxTimer = timer;\n\n      if (history.location.pathname.includes('feedback')) {\n        return clearInterval(myInterval);\n      }\n\n      if (maxTimer > 0) {\n        maxTimer -= 1;\n\n        return showTimerAction(maxTimer);\n      }\n\n      timeOverAction(true);\n      showTimerAction(0);\n      reciveButton(true);\n    }, TIMEINTERVAL);\n\n    return myInterval;\n  }\n\n  onClickChange = () => {\n    const { history,\n      showTimerAction,\n      timeOverAction,\n      reciveButton } = this.props;\n\n    const { indexQuestions } = this.state;\n    const numberIndex = 4;\n    const MAGICNUMBER = 30;\n    this.setState((prevState) => ({\n      indexQuestions: prevState.indexQuestions + 1,\n    }));\n\n    if (indexQuestions === numberIndex) {\n      this.saveInLocalStorage();\n      history.push('/feedback');\n    }\n    showTimerAction(MAGICNUMBER);\n    timeOverAction(false);\n    reciveButton(false);\n    this.resetClass();\n  }\n\n  render() {\n    const { indexQuestions } = this.state;\n    const { questions, requestAPI, requestState, randomArray, showButton } = this.props;\n    const requestFailed = 3;\n    if (requestState === requestFailed) {\n      return <Redirect to=\"/\" />;\n    }\n    return (\n      <>\n        <Header />\n        <Timer />\n        {!requestAPI && (\n          <Question\n            question={ questions[indexQuestions] }\n            randomArray={ randomArray[indexQuestions] }\n          />\n        )}\n        { showButton ? (\n          <button\n            id=\"buttonNext\"\n            type=\"button\"\n            data-testid=\"btn-next\"\n            onClick={ this.onClickChange }\n          >\n            Next\n          </button>\n        ) : ('')}\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchAPI: (endPoint) => dispatch(requestQuestions(endPoint)),\n  reciveButton: (payload) => dispatch(actionReciveButton(payload)),\n  showTimerAction: (payload) => dispatch(showTimer(payload)),\n  timeOverAction: (payload) => dispatch(timeOver(payload)),\n});\n\nconst mapStateToProps = (store) => ({\n  questions: store.game.questions,\n  requestAPI: store.game.requestAPI,\n  requestState: store.game.requestState,\n  randomArray: store.game.randomArray,\n  showButton: store.game.showButton,\n  player: store.player,\n  login: store.login,\n  timer: store.game.timer,\n});\n\nGame.propTypes = {\n  requestState: PropTypes.number,\n  questions: PropTypes.arrayOf(PropTypes.object),\n  fetchAPI: PropTypes.func.isRequired,\n  requestAPI: PropTypes.bool,\n  randomArray: PropTypes.arrayOf(PropTypes.any),\n  showButton: PropTypes.bool.isRequired,\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n  showTimerAction: PropTypes.func.isRequired,\n  timeOverAction: PropTypes.func.isRequired,\n  reciveButton: PropTypes.func.isRequired,\n  player: PropTypes.objectOf(PropTypes.any).isRequired,\n  login: PropTypes.objectOf(PropTypes.any).isRequired,\n  timer: PropTypes.number.isRequired,\n};\n\nGame.defaultProps = {\n  questions: [],\n  requestAPI: true,\n  requestState: 0,\n  randomArray: [],\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","const TOKEN_URL = 'https://opentdb.com/api_token.php?command=request';\n\nconst getToken = async () => {\n  const response = await fetch(TOKEN_URL);\n  const data = await response.json();\n  return data;\n};\n\nexport default getToken;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { playerInfoToStore } from '../redux/actions';\nimport getToken from '../services/tokenAPI';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      playerName: '',\n      playerEmail: '',\n      isButtonDisabled: true,\n    };\n  }\n\n  handleInputChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    }, () => {\n      const { playerName, playerEmail } = this.state;\n      const regex = /\\S+@\\S+\\.\\S+/;\n      this.setState({\n        isButtonDisabled: playerName.length === 0 || !regex.test(playerEmail),\n      });\n    });\n  }\n\n  handleClick = async () => {\n    const { history, sendPlayerInfoToStore } = this.props;\n    const { playerName, playerEmail } = this.state;\n    const require = await getToken();\n    const { token } = require;\n    sendPlayerInfoToStore(playerName, playerEmail);\n    await localStorage.setItem('token', token);\n    history.push('/game');\n  }\n\n  render() {\n    const { playerName, playerEmail, isButtonDisabled } = this.state;\n    const { history } = this.props;\n    return (\n      <>\n        <form>\n          <label htmlFor=\"input-player-name\">\n            Player:\n            <input\n              type=\"text\"\n              data-testid=\"input-player-name\"\n              id=\"input-player-name\"\n              name=\"playerName\"\n              placeholder=\"Insira o nome do jogador\"\n              onChange={ this.handleInputChange }\n              value={ playerName }\n            />\n          </label>\n          <label htmlFor=\"input-gravatar-email\">\n            E-mail:\n            <input\n              type=\"email\"\n              data-testid=\"input-gravatar-email\"\n              id=\"input-gravatar-email\"\n              name=\"playerEmail\"\n              placeholder=\"Insira o e-mail do jogador\"\n              onChange={ this.handleInputChange }\n              value={ playerEmail }\n            />\n          </label>\n          <button\n            type=\"button\"\n            data-testid=\"btn-play\"\n            disabled={ isButtonDisabled }\n            onClick={ this.handleClick }\n          >\n            Play\n          </button>\n        </form>\n        <button\n          type=\"button\"\n          data-testid=\"btn-settings\"\n          onClick={ () => { history.push('/settings'); } }\n        >\n          Configurações\n        </button>\n      </>\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n  sendPlayerInfoToStore: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendPlayerInfoToStore: (playerName, playerEmail) => (\n    dispatch(playerInfoToStore(playerName, playerEmail))),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\n\nclass Settings extends React.Component {\n  render() {\n    return (\n      <h1 data-testid=\"settings-title\">Em desenvolvimento!</h1>\n    );\n  }\n}\n\nexport default Settings;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\nimport Game from './pages/Game';\nimport Login from './pages/Login';\nimport Settings from './pages/Settings';\nimport logo from './trivia.png';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <Switch>\n        <Route path=\"/\" exact component={ Login } />\n        <Route path=\"/game\" component={ Game } />\n        <Route path=\"/settings\" component={ Settings } />\n        <Route path=\"/feedback\" component={ Feedback } />\n        <Route path=\"/ranking\" component={ Ranking } />\n      </Switch>\n    </div>\n  );\n}\n","const INITIAL_STATE = {\n  token: '',\n  playerName: '',\n  playerEmail: '',\n};\n\nconst login = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'RECEIVE_TOKEN_SUCCESS':\n    return {\n      ...state,\n      token: action.token,\n    };\n  case 'PLAYER_INFO_TO_STORE':\n    return {\n      ...state,\n      playerName: action.playerName,\n      playerEmail: action.playerEmail,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default login;\n","import { REQUEST_API, REQUEST_SUCSSES } from '../actions';\n\nconst INITIAL_STATE = {\n  player: {\n    score: 0,\n  },\n  timer: 30,\n  timeOver: false,\n  showButton: false,\n  endGame: false,\n};\n\nconst game = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case REQUEST_API:\n    return { ...state, requestAPI: true };\n\n  case REQUEST_SUCSSES:\n    return { ...state,\n      questions: action.questions,\n      player: { score: 0 },\n      randomArray: action.randomArray,\n      requestAPI: false,\n      requestState: action.requestState,\n    };\n\n  case 'SHOW_TIMER':\n    return {\n      ...state, timer: action.payload,\n    };\n\n  case 'TIME_OVER':\n    return {\n      ...state, timeOver: action.payload,\n    };\n\n  case 'SHOW_BUTTON':\n    return {\n      ...state, showButton: action.payload,\n    };\n\n  default:\n    return state;\n  }\n};\n\nexport default game;\n","const INITIAL_STATE = {\n  score: 0,\n  assertions: 0,\n};\n\nconst player = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'SUM_SCORE':\n    return {\n      ...state, score: action.payload,\n    };\n  case 'SUM_TOTAL_POINTS':\n    return {\n      ...state,\n      assertions: state.assertions + 1,\n    };\n  case 'RESET_SCORE':\n    return {\n      ...state, score: 0,\n    };\n  case 'RESET_ASSERTIONS':\n    return {\n      ...state, assertions: 0,\n    };\n  default:\n    return {\n      ...state,\n    };\n  }\n};\n\nexport default player;\n","import { combineReducers } from 'redux';\nimport login from './login';\nimport game from './game';\nimport player from './player';\n\nconst rootReducer = combineReducers({\n  login,\n  game,\n  player,\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\nif (window.Cypress) {\n  window.store = store;\n}\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport './index.css';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}